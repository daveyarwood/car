#!/usr/bin/env boot
; -*- mode: Clojure;-*-
; vim: ft=clojure

(set-env!
  :dependencies #(into % '[[car   "0.1.0"]
                           [defun "0.2.0-RC"]]))

(require '[defun                   :refer (defun)]
         '[boot.from.io.aviso.ansi :refer :all]
         '[car.util                :refer (parse-number-or-fail)]
         '[car.config              :refer :all]
         '[car.current-mileage     :refer :all]
         '[car.tasks               :refer :all])

(defn •current-mileage• [txt]
  (blue-bg (black txt)))

(defn •current-mileage-num• [txt]
  (white-bg (bold-black txt)))

(defn •task-name• [txt]
  (cyan-bg (black txt)))

(defn •attribute• [txt]
  (yellow txt))

(defn •good• [txt]
  (green txt))

(defn •bad• [txt]
  (red txt))

(defn •bad!• [txt]
  (bold-red txt))

(defun -main
  ([]
    (-main "current")
    (doseq [{task-name :name} (from-config [:tasks])]
      (-main task-name)))

  (["current"]
    (let [current-mileage (get-current-mileage!)]
      (println (str (•current-mileage• "Current mileage") \:)
               (•current-mileage-num• current-mileage))))
  (["current" n]
    (let [new-mileage (parse-number-or-fail n)]
      (set-current-mileage! new-mileage)
      (-main "current")))

  (["last"]
    (-main "current")
    (doseq [{task-name :name} (filter :interval (:tasks (config)))]
      (-main "last" task-name)))
  (["last" (task :guard recorded-task?)]
    (let [{task-name :name, last-done :last-done} (find-task-by-query task)
          current-mileage (get-current-mileage!)]
      (println (str (•task-name• task-name) \:)
               "last done at" (str (•good• last-done) \.))))
  (["last" (task :guard upcoming-task?)]
    (let [{task-name :name} (find-task-by-query task)]
      (println (str (•task-name• task-name) \:)
               "you haven't done this yet.")))
  (["last" task] (-main :unknown task))
  (["last" (task :guard recorded-task?) n]
    (let [new-mileage (parse-number-or-fail n)]
      (update-last-done! task new-mileage)
      (-main "last" task)))
  (["last" (task :guard upcoming-task?) n]
    (let [new-mileage (parse-number-or-fail n)]
      (update-last-done! task new-mileage)
      (convert-to-recorded-task! task)
      (-main "last" task)))

  (["add"] (println "Add what?"))
  (["add" task-name & configs]
    (apply add-task! task-name configs)
    (println (str task-name \:) (str (•good• "added") \.)))

  (["delete"] (println "Delete what?"))
  (["delete" task]
    (let [{task-name :name} (find-task-by-query task)]
      (delete-task! task)
      (println (str (•task-name• task-name) \:) (str (•bad• "deleted") \.))))

  (["rename"] (println "Rename what?"))
  (["rename" task] (-main "rename" task nil))
  (["rename" task new-name]
    (let [{old-name :name} (find-task-by-query task)]
      (if new-name
        (do
          (rename-task! old-name new-name)
          (println (str old-name \:) (•good• "renamed") "to" 
                   (str (•task-name• new-name) \.)))
        (println "Rename" old-name "to what?"))))

  ([(task :guard regular-task?)]
    (let [{:keys [name interval last-done]} (find-task-by-query task)
          current-mileage (get-current-mileage!)
          task-due (next-due task current-mileage)]
      (set-current-mileage! current-mileage)
      (println (str (•task-name• name) \:)
               "last done at" (str (•good• last-done) \,)
               (if (overdue? task)
                 (str (•bad• "was due at") \space (•bad!• task-due) \.)
                 (str "due at " (•good• task-due) \.)))))
  ([(task :guard regular-task?) "interval"]
    (let [{:keys [name interval]} (find-task-by-query task)]
      (println (str (•task-name• name) \:)
               "due every" (str (•good• interval)) "miles.")))

  ([(task :guard recorded-task?)]
    (-main "last" task))
  ([(task :guard recorded-task?) "interval"]
    (let [{task-name :name} (find-task-by-query task)]
      (println "No" (•attribute• "interval") "set for" (str (•task-name• task-name) \.))))
  ([(task :guard recorded-task?) n]
    (-main "last" task n))
  ([(task :guard recorded-task?) "interval" n]
    (let [{task-name :name} (find-task-by-query task)
          new-interval      (parse-number-or-fail n)]
      (set-task-interval! task new-interval)
      (if (zero? new-interval)
        (println "Deleted" (•attribute• "interval") "setting for" (str (•task-name• task-name) \.))
        (-main task "interval"))))
  ([(task :guard recorded-task?) "due-at" n]
    (let [{task-name :name} (find-task-by-query task)
          new-due-at        (parse-number-or-fail n)]
      (set-task-due-at! task new-due-at)
      (if (zero? new-due-at)
        (println "Deleted" (•attribute• "due-at") "setting for" (str (•task-name• task-name) \.))
        (-main task))))

  ([(task :guard upcoming-task?)]
    (let [{task-name :name, due-at :due-at} (find-task-by-query task)
          current-mileage (get-current-mileage!)]
      (set-current-mileage! current-mileage)
      (println (str (•task-name• task-name) \:)
               (if (overdue? task)
                 (str (•bad• "was due at") \space (•bad!• due-at) \.)
                 (str "due at " (•good• due-at) \.)))))
  ([(task :guard upcoming-task?) n]
    (-main "last" task n))

  ([:unknown task] (println "I don't know what" task "is."))
  ([task] (-main :unknown task))
  ([_ & more] (println "lol wut?")))
